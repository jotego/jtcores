show_help() {
        cat << EOF
JTFRAME simulation tool. (c) Jose Tejada 2019-2022, @topapate
Please support the development: https://patreon.com/jotego

    -args      Additional arguments for the simulator
    -batch     Tells jtsim that it is being run by a batch process
    -cov       Enables coverage simulation (only verilator)
               Look at the files in the cov folder for annotated results
    -d         Add specific Verilog macros for the simulation.
               Call jtmacros to display all macros.
    -debug_bus x
               Sets the debug_bus value to x (sets JTFRAME_SIM_DEBUG)
    -dir       Create directory for the simulation. Use with -setname
    -deep      Save all signals for scope verification. See -w below.
    -dipsw     Set the DIP sw for simulation. Use with hexadecimal number
               Default DIP switch values for each game are dumped in ASCII
               to .dip files in $ROM.
               If the simulation is run from a folder whose name matches a
               .dip file in $ROM, and -dipsw is not set, then jtsim will load
               the matching file automatically
    -dump n    Uses IOCTL interface to dump the core contents. Sets ioctl_ram,
               requires JTFRAME_IOCTL_RD. Dumping will start at frame n
    -fast      Sets optimizer level to 3 when running Verilator sims. It may cause stability problems.
    -frame     Number of frames to simulate
    -frate     Define the frame rate. Used for generating .mp4 files. Adds JTFRAME_SIM_VIDEO to dump all frames.
    -gates     Gate-level simulation
    -fx68k     Keep FX68K files for Icarus Verilog
    -inputs    Defines SIM_INPUTS macro:
               Game cabinet inputs will be taken from sim_inputs.hex or
               from the file name after -inputs. Note that in if you specify
               a file, then sim_inputs.hex will get overwritten with that file.

               The input file can be in .cab format (see jtframe cab --help) or
               in plain hex format.

               In hex format each line contains a byte with the input status.
               All bits are read as active high. They are inverted
               if necessary by JTFRAME logic,
               The format is:
               bit  |  Meaning
               3:0  | { start[1:0], service, coin[0] }
               7:4  | joystick for 1P
                    | UP, DOWN, LEFT, RIGHT
               10:8 | buttons
                    | B3, B2, B1
               11   | test
    -iverilog  Use Icarus Verilog as the simulator
    -lint      Run verilator as lint tool
    -load      Load the ROM file using the SPI communication. Slower.
    -modelsim  Use ModelSim as the simulator
    -modules   Location of the modules folder with respect to the simulation folder
    -mist      Use MiST setup for simulation, instead of using directly the
               game module. This is slower but more informative.
    -ncverilog Select NCVerilog as the simulator
    -nosnd|-q  Disable SOUND hardware. Speeds up simulation a lot!
    -pause     Enable pause DIP setting. Same as -d DIP_PAUSE
    -pocket    Select PocketFPGA as target platform
    -questasim Use QuestaSim as the simulator
    -s|-scene  Simulates a scene dump. These dumps can be obtained through FPGA runs,
               MAME emulation or simulation. New cores and encouraged to use the ioctl
               dump features in mem.yaml to create these dumps.
    -safe      Disable verilator optimizations that may halt the elaboration stage
    -setname   Creates the .rom file for the given MAME setname by looking in the MRA folder
    -shaup     Update the .sha file with the shasum for each frame.jpg
    -srate     Sampling rate of the .wav file
    -stats     Run SDRAM usage analysis
    -synap     Use Synapticad's simulator
    -time      Number of milliseconds to simulate
    -test      Enable test DIP setting. Same as -d DIP_TEST
    -keepcpp   Do not overwrite the test.cpp file from the JTUTIL version
    -skipROM   Do not generate .rom files
    -slowpll   Simulate using Altera's model for PLLs
    -showcmd   Display the simulation command only. Do not run any simulation.
    -u,-undef  Undefine macro during simulation
    -verilator Use Verilator as the simulator
    -video     Enable video output. Can be followed by a number to get
               the number of frames to simulate.
    -w [#]     Save a small set of signals for scope verification. If a number
               is written after -w, the dump will start at that frame
    -zoom      Enlarge output images
EOF
}

define_terminal_colors() {
	if [ -n "$TERM" ]; then # if running on a terminal
	    export TERM
	    red=`tput setaf 1`
	    green=`tput setaf 2`
	    blue=`tput setaf 4`
	    white=`tput setaf 7`
	    rBG=`tput setab 1; tput setaf 7`
	    gBG=`tput setab 2; tput setaf 7`
	    bBG=`tput setab 4; tput setaf 7`
	    yBG=`tput setab 3; tput setaf 7`
	    wBG=`tput setab 7; tput setaf 0`
	    NC=`tput sgr0`
	fi
}

has_parent() {
    p=`pwd`
    while [ "$p" != "/" ]; do
        parent=$(dirname "$p")
        if [ $(basename "$parent") = "$1" ]; then return 0; fi
        p=$parent
    done
    return 1
}

clean_up() {
    rm -f video.pipe frame.raw \
       game.f  jtsim.f  jtsim_vhdl.f simfile.f *bak *.def \
       make.log defmacros.h filtered.f microrom.mem nanorom.mem
    if [ -z "$TESTCPP" ]; then rm -f test.cpp; fi
    rm -f video.raw video.pipe
    echo -e "\e[0m"
    echo
}

add_dir() {
    if [ ! -d "$1" ]; then
        echo "${rBG}Error:${NC} add_dir (sim.sh) failed because $1 is not a directory" 1>&2
        exit 1
    fi
    processF=no
    echo "Adding dir $1 $2" >&2
    for i in $(cat $1/$2); do
        if [ "$i" = "-sv" ]; then
            # ignore statements that iVerilog cannot understand
            continue;
        fi
        if [ "$processF" = yes ]; then
            processF=no
            # echo $(dirname $i) >&2
            # echo $(basename $i) >&2
            dn=$(dirname $i)
            if [ "$dn" = . ]; then
                dn=$1
            fi
            add_dir $dn $(basename $i)
            continue
        fi
        if [[ "$i" = -F || "$i" == -f ]]; then
            processF=yes
            continue
        fi
        # ignore comments
        if [ "${i:0:1}" = \# ]; then
            continue
        fi
        fn="$1/$i"
        if [ ! -e "$fn" ]; then
            (>&2 echo "Cannot find file $fn")
        fi
        echo $fn
    done
}

# iverilog does not have a -F command:
emulate_F() {
    oldIFS="$IFS"
    while IFS= read -r line; do
        if [ `expr "$line" : -F ` -eq 2 ]; then
            line=${line:3}
            dname=$(dirname "$line")
            fname=$(basename "$line")
            add_dir $dname $fname
        else
            echo "$line"
        fi
    done < $1
    IFS="$oldIFS"
}

# First parse all the arguments in search of simulator arguments
preparse_args() {
    while [ $# -gt 0 ]; do
        case ${1:1} in
            verilator|lint)
                SIMULATOR=verilator
                MACROPREFIX=-D
                ;;
            ncverilog|synapticad|modelsim|iverilog|questasim)
                SIMULATOR=${1:1}
                MACROPREFIX=+define+
                ;;
            xcelium)
                SIMULATOR=${1:1}
                MACROPREFIX="-define "
                ;;
            sysname) shift; SYSNAME=$1
        esac
        shift
    done
}

require() {
    if [ -z "$1" ]; then
        echo "${rBG}Error:${NC} $2"
        exit 1
    fi
}

enable_load() {
    # Moves away the old files to prevent mistakes
    if [[ -e sdram_bank0.bin || -e sdram_bank0.hex ]]; then
        echo "Moving old sdram_bank files to sdram.old"
        mkdir -p sdram.old
        mv sdram_bank?.* sdram.old > /dev/null
    fi
    add_macro LOADROM
    echo ROM load through SPI enabled
}

add_macro() {
    if [ $# = 0 ]; then return; fi
    if [ ! -z "$ALLMACROS" ]; then
        ALLMACROS=${ALLMACROS},
    fi
    ALLMACROS=${ALLMACROS}$1
    shift
    add_macro $*
}

has_macro() {
    local name="$1"
    test ! -z "`get_macro $1`"
}

get_macro() {
    local name="$1"
    if [ -z "$name" ]; then return; fi
    IFS=',' read -ra allmacros <<< "$ALLMACROS"
    for macro in "${allmacros[@]}"; do
        local macro_name macro_value
        macro_name="${macro%%=*}"
        if [[ "$macro" == *"="* ]]; then
            macro_value="${macro#*=}"
        fi
        if [ $macro_name = $name ]; then
            echo $macro_value
            return
        fi
    done
}

warn_if_longsim_noinputs() {
    local maxframes
    maxframes=`get_macro MAXFRAME`
    if [ -z "$maxframes" ]; then return; fi
    if [ "$maxframes" -lt 100 ]; then return; fi
    if ! has_macro SIM_INPUTS; then
        echo "${rBG}WARNING:${NC} Long simulation ($maxframes frames) without cabinet inputs"
    fi
}

set_mist_as_target() {
    TOP=mist_test
    TARGET=mist
}

set_sidi128_as_target() {
    TOP=mist_test
    TARGET=sidi128
}

set_zoom() {
    export CONVERT_OPTIONS="-filter point -resize 200% $CONVERT_OPTIONS"
}

# Use this function to create
# HEX files with initial contents for some of the RAMs
clear_hex_file() {
    cnt=0
    rm -f $1.hex
    while [ $cnt -lt $2 ]; do
        echo 0 >> $1.hex
        cnt=$((cnt+1))
    done
}

jtcfgstr() {
    jtframe cfgstr $SYSNAME --target=$TARGET --output=$1 --def=$ALLMACROS --undef=$UNDEF
}

make_verilator_command() {
	echo "${VERILATOR_PATH}verilator -I$CORES/$SYSNAME/hdl"\
"       -I$JTFRAME/hdl/inc "\
"       -I$MODULES/jtkcpu/hdl -I$MODULES/jt900h/hdl "\
"       --timescale 1ps/1ps "\
"       $JTFRAME/hdl/ver/game_test.v $JTFRAME/hdl/video/jtframe_lfbuf*.v $JTFRAME/hdl/ver/psram128.v $SIMARGS "\
"       -Wno-TIMESCALEMOD --timescale-override 1ns/1ps -Wno-fatal "\
"       -o sim "\
"       $EXTRA $TRACE --prefix UUT --assert "\
"       --cc test.cpp --exe $SIMULATOR_EXTRA $COV "\
"       -Wwarn-UNDRIVEN --waiver-output waiver $GAME_VLT $VERILATOR_SAFE "
}

is_lint_on() {
	echo "$EXTRA" | grep lint-only
}

compile_verilator_sim() {
    # boost C++ optimization without affecting other settings
    if [ ! -z "$FAST" ]; then export CPPFLAGS=`echo "$CPPFLAGS" | sed s/-O1/-O3/`; fi
    if ! make $MAKEJOBS -C obj_dir -f UUT.mk sim > make.log; then
        cat make.log
        exit $?
    fi
}

prepare_fst_pipe() {
	rm -f test.vcd
    if [[ -n "$DUMP" && -z "$SHOWCMD" ]]; then
        if which vcd2fst > /dev/null; then
            mkfifo test.vcd
            vcd2fst -p test.vcd test.fst&
        fi
    fi
}

run_verilator_sim() {
	$SHOWCMD obj_dir/sim $TRACE -time $SIM_MS || echo "Verilator sim exit code $?"
}

clean_fst_pipe() {
	rm -f test.vcd
}

run_coverage() {
    mkdir -p cov
    verilator_coverage --annotate cov logs/coverage.dat
}

convert_raw2wav() {
	if [ -e sound.raw ]; then
	    $JTUTIL/bin/raw2wav $SAMPLING_RATE < sound.raw
	    rm -f sound.raw
	fi
}

check_shasum() {
	if [ ! -z "$SETNAME" ]; then
	    if [ ! -z "$SHAUP" ]; then
	        shasum frame*jpg > ../$SETNAME.sha;
	    elif [ -e ../$SETNAME.sha ]; then
	        if shasum --check ../$SETNAME.sha; then echo PASS; else echo FAIL; fi
	    fi
	fi
}

count_frame_images() {
	ls frames/frame*jpg 2>/dev/null | wc -l
}

make_mpeg() {
    if [ -z "$FRAMERATE" ]; then
        FRAMERATE=30
        echo "Define and export FRAMERATE"
        if has_macro JTFRAME_SIM_VIDEO; then
            FRAMERATE=60;
        elif [ $(ls frames/frame*jpg 2>/dev/null | wc -l ) -gt 2000 ]; then
            echo "Large number of frames... maybe enable JTFRAME_SIM_VIDEO to create a full video"
        fi
    fi
    if [[ "$VIDEO_DUMP" = TRUE ]]; then
        ffmpeg -y -framerate $FRAMERATE \
        -pattern_type glob -i frames/'frame_*.jpg' \
        -i test.wav -c:a aac -c:v libx264 -vf "scale=iw*3:ih*3" \
        -pix_fmt yuv420p test.mp4 > /dev/null 2>&1
    fi
}

convert_channel_raw2wav() {
	shopt -s nullglob
	CHRAW=(ch?.raw)
	shopt -u nullglob
	for i in "${CHRAW[@]}"; do
	    if [ $(od -An -tx1 -v $i | grep -v ' 00 ' | wc -l) -eq 0 ]; then
	        echo "$i is empty, deleting it" > /dev/null
	    else
	        ffmpeg -y -f s16le -ar 192000 -ac 2 -i $i ${i%.raw}.wav > /dev/null 2>&1 || continue
	    fi
	    rm -f $i
	done
}

copy_scene_frame() {
    SCNNUM=$(basename $(dirname $SCENE))
    set -v
    mv `ls frames/frame_*.jpg | tail -n 1` `dirname $SCENE`/$SCNNUM.jpg
    set +v
}

display_scene_frame() {
	last_frame_image=`ls frames/frame_*.jpg | tail -n 1`
	eom $last_frame_image
}

use_setname() {
    if [ ! -z "$DIR" ]; then # Run the simulation inside a folder named after the set
        mkdir -p "$SETNAME" || exit $?
        cd "$SETNAME"
    fi
    if [ -z "$SKIPROM" ]; then getset.sh $SYSNAME $SETNAME $SKIPROM || exit $?; fi
    if [ -s $ROM/$SETNAME.dip ]; then
        if ! has_macro JTFRAME_SIM_DIPS; then
            # Not all systems have DIPs
            DIPS=`cat $ROM/$SETNAME.dip`
            if [ ! -z "$DIPS" ]; then add_macro JTFRAME_SIM_DIPS=0x$DIPS; fi
        fi
    fi
    ROMFILE=$ROM/$SETNAME.rom
    if [ ! -e $ROMFILE ]; then
        cat<<EOF
jtsim: cannot produce $ROMFILE"
    This may occur if the setname is longer than 8 characters or
    if you are not in the core folder for the game
EOF
        exit 1
    fi
    if [[ ! -e rom.bin || `readlink rom.bin` != "$ROMFILE" ]]; then
        ln -srf $ROMFILE rom.bin
        enable_load
    fi
    if [ -e $ROM/$SETNAME.mod ]; then cp $ROM/$SETNAME.mod core.mod; fi
}

derive_corename_from_folder() {
    local corename=$(realpath `pwd` --relative-to=$CORES | cut -d/ -f1)
    if [[ $corename == ..* ]]; then
        echo "You must run jtsim from inside a folder in $CORES" >&2
        exit 1
    fi
    echo $corename
}

derive_setname_from_folder() {
    local setname=$(basename `pwd`)
    echo $setname
}

get_default_dipsw() {
    local setname="$1"
    if [ -z "$setname" ]; then
        echo "get_default_dipsw called by setname is blank"
        exit 1
    fi
    local dipfile=$ROM/${setname}.dip
    if [ ! -s $dipfile ]; then
        echo "${rBG}WARNING${NC}: $ROM/${setname}.dip not found"
        return
    fi
    local hexdip
    hexdip=`cat $ROM/${setname}.dip`
    add_macro JTFRAME_SIM_DIPS=0x$hexdip
    echo "Using DIP switches from rom/${setname}.dip"
}

copy_mod_file() {
    local setname="$1"
    if [ ! -e $ROM/${setname}.mod ]; then
        return
    fi
    cp $ROM/${setname}.mod core.mod
}

make_rombin_link() {
    local setname="$1"
    if [ -z "$setname" ]; then
        echo "Create rom.bin manually or run the sim from a folder named after the ROM set name"
        exit 1
    fi
    local romfile="$ROM/$setname.rom"
    if [ ! -e $romfile ]; then
        echo "ERROR: cannot make rom.bin from $romfile"
        exit 1
    fi
    ln -sr $romfile rom.bin
}

get_file_length() {
    local filename="$1"
    if ! stat --version > /dev/null; then
        stat -L -f %z $filename
    else
        stat -L -c%s $filename
    fi
}

disable_patreon_credits() {
    $SED /JTFRAME_CREDITS/d core.def
}

prepare_gatelevel_sim() {
    # Gate-level simulation uses the synthesis output directly
    GATENETLIST=$CORES/$SYSNAME/mist/simulation/ncsim/${CORENAME,,}_8_1200mv_85c_slow.vo
    if [ ! -e "$GATENETLIST" ]; then
        echo "${rBG}Error:${NC} cannot open the gate-level netlist. Looking for file"
        echo "$GATENETLIST"
        echo "Generate it using Quartus II, for the MiST core files"
        exit 1
    fi
    QPATH=`which quartus`
    if [[ -z "$QPATH" ]]; then
        echo "${rBG}Error:${NC} Quartus is not in the PATH"
        exit 1
    fi
    QPATH=${QPATH%quartus/bin/quartus}/modelsim_ae/altera/verilog/src
    if [ ! -d "$QPATH" ]; then
        echo "${rBG}Error:${NC} cannot find the path to Quartus simulation files"
        echo Looking at "$QPATH"
        exit 1
    fi
    echo $GATENETLIST > filtered.f
    echo $QPATH/{altera_primitives,cycloneiii_atoms}.v >> filtered.f
    echo $JTFRAME/target/mist/mist_test.v \
mist_dump.v \
+define+GATES \
>> filtered.f
    # Remove MiST definitions
    FILES=
}