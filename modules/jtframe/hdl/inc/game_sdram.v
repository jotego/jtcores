// jt{{.Core}}_game_sdram.v is automatically generated by JTFRAME
// Do not modify it
// Do not add it to git

`ifndef JTFRAME_COLORW
`define JTFRAME_COLORW 4
`endif

`ifndef JTFRAME_BUTTONS
`define JTFRAME_BUTTONS 2
`endif

module jt{{.Core}}_game_sdram(
    `include "jtframe_common_ports.inc"
    `include "jtframe_mem_ports.inc"
);

/* verilator lint_off WIDTH */
localparam [25:0] BA1_START  =`ifdef JTFRAME_BA1_START  `JTFRAME_BA1_START  `else 26'd0 `endif;
localparam [25:0] BA2_START  =`ifdef JTFRAME_BA2_START  `JTFRAME_BA2_START  `else 26'd0 `endif;
localparam [25:0] BA3_START  =`ifdef JTFRAME_BA3_START  `JTFRAME_BA3_START  `else 26'd0 `endif;
localparam [25:0] PROM_START =`ifdef JTFRAME_PROM_START `JTFRAME_PROM_START `else 26'd0 `endif;
localparam [25:0] HEADER_LEN =`ifdef JTFRAME_HEADER     `JTFRAME_HEADER     `else 26'd0 `endif;
/* verilator lint_on WIDTH */

{{ range .Params }}
parameter {{.Name}} = {{ if .Value }}{{.Value}}{{else}}`{{.Name}}{{ end}};
{{- end}}

{{- if .Ioctl.Dump }}
/* verilator tracing_off */
wire [7:0] ioctl_aux;
`ifndef JTFRAME_IOCTL_RD
    assign ioctl_aux=0;
`endif
{{- range $k, $v := .Ioctl.Buses }}{{ if $v.Name}}
wire [{{$v.DW}}-1:0] {{$v.Name}}_dimx;
wire [  1:0] {{$v.Name}}_wemx;{{if $v.Amx}}
wire [{{$v.AW}}-1:{{$v.AWl}}] {{$v.Amx}};{{ end }}{{end -}}
{{end}}{{end}}

// Audio channels {{ range .Audio.Channels }}{{ if .Name }}
{{ if .Stereo }}wire {{ if not .Unsigned }}signed {{end}}{{ data_range . }} {{.Name}}_l, {{.Name}}_r;{{ else -}}
wire {{ if not .Unsigned }}signed {{end}}{{ data_range . }} {{.Name}};{{ end }}{{end}}{{if .Rc_en}}
wire {{if gt .Filters 1}}[{{sub .Filters 1}}:0] {{end}}{{.Name}}_rcen;{{end}}{{- end}}
wire mute;
// Additional ports
{{range .Ports}}wire {{if .MSB}}[{{.MSB}}:{{.LSB}}]{{end}} {{.Name}};
{{end}}
// BRAM buses
{{- range $cnt, $bus:=.BRAM }}
{{ if .Dual_port.Name }}
{{ if not .Dual_port.We }}wire    {{ if eq .Data_width 16 }}[ 1:0]{{else}}      {{end}}{{.Dual_port.Name}}_we; // Dual port for {{.Dual_port.Name}}
{{end}}{{end}}
{{- end}}
// SDRAM buses
{{ range .SDRAM.Banks}}
{{- range .Buses}}
wire {{ addr_range . }} {{.Name}}_addr;
wire {{ data_range . }} {{.Name}}_data;
wire        {{.Name}}_cs, {{.Name}}_ok;
{{- if .Rw }}
wire        {{.Name}}_we;
wire {{ data_range . }} {{.Name}}_din;
wire [ 1:0] {{.Name}}_dsn;
{{end}}{{end}}
{{- end}}
wire        prom_we, header;
wire [21:0] raw_addr, post_addr;
wire [25:0] pre_addr, dwnld_addr, ioctl_addr_noheader;
wire [ 7:0] post_data;
wire [15:0] raw_data;
wire [ 7:0] pcb_id;
wire        pass_io;
{{ if .Clocks }}// Clock enable signals{{ end }}
{{- range $k, $v := .Clocks }}
    {{- range $v }}
    {{- range .Outputs }}
wire {{ . }}; {{ end }}{{ end }}{{ end }}
wire gfx8_en, gfx16_en, ioctl_dwn;

assign pass_io = header | ioctl_ram;
assign ioctl_addr_noheader = `ifdef JTFRAME_HEADER header ? ioctl_addr : ioctl_addr - HEADER_LEN `else ioctl_addr `endif ;

wire rst_h, rst24_h, rst48_h, hold_rst;
`ifdef JTFRAME_CLK96
wire clk48=clk;
`endif
/* verilator tracing_off */
jtframe_rsthold u_hold(
    .rst    ( rst       ),
    .clk    ( clk       ),
    .hold   ( hold_rst  ),
    .rst_h  ( rst_h     ),
    .rst24  ( rst24     ),
    .clk24  ( clk24     ),
    .rst24_h( rst24_h   )
`ifdef JTFRAME_CLK48 ,
    .rst48  ( rst48     ),
    .clk48  ( clk48     ),
    .rst48_h( rst48_h   )
`endif
);
/* verilator tracing_on */
jt{{if .Game}}{{.Game}}{{else}}{{.Core}}{{end}}_game u_game(
    .rst        ( rst_h     ),
    .clk        ( clk       ),
    .rst24      ( rst24_h   ),
    .clk24      ( clk24     ),
`ifdef JTFRAME_CLK48
    .rst48      ( rst48_h   ),
    .clk48      ( clk48     ),
`endif
    .rst96      ( rst96     ),
    .clk96      ( clk96     ),
    // Audio channels
    {{if .Audio.Mute}}.mute( mute ),
    {{end}}{{ range .Audio.Channels -}}
    {{ if .Name }}{{ if .Stereo }}.{{.Name}}_l   ( {{.Name}}_l    ),
    .{{.Name}}_r   ( {{.Name}}_r    ),{{ else -}}
    .{{.Name}}     ( {{.Name}}      ),{{ end }}{{ end }}{{if .Rc_en}}
    .{{.Name}}_rcen( {{.Name}}_rcen ),
{{end}}{{ end}}
    {{ if eq (len .Audio.Channels) 0 }}
    // Sound output
`ifdef JTFRAME_STEREO
    .snd_left       ( snd_left      ),
    .snd_right      ( snd_right     ),
`else
    .snd            ( snd           ),
`endif
    .sample         ( sample        ), {{ end }}
    .snd_en         ( snd_en        ),
    .snd_vol        ( snd_vol       ),
{{- range $k,$v := .Clocks }} {{- range $v}}
    {{- range .Outputs }}
    .{{ . }}    ( {{ . }}    ), {{end}}{{end}}
{{ end }}
    .pxl2_cen       ( pxl2_cen      ),
    .pxl_cen        ( pxl_cen       ),
    .red            ( red           ),
    .green          ( green         ),
    .blue           ( blue          ),
    .LHBL           ( LHBL          ),
    .LVBL           ( LVBL          ),
    .HS             ( HS            ),
    .VS             ( VS            ),
    // cabinet I/O
    .cab_1p   ( cab_1p  ),
    .coin     ( coin    ),
    .joystick1    ( joystick1        ), .joystick2    ( joystick2        ),
    .joystick3    ( joystick3        ), .joystick4    ( joystick4        ), `ifdef JTFRAME_MOUSE
    .mouse_1p     ( mouse_1p         ), .mouse_2p     ( mouse_2p         ), .mouse_strobe ( mouse_strobe ), `endif `ifdef JTFRAME_SPINNER
    .spinner_1p   ( spinner_1p       ), .spinner_2p   ( spinner_2p       ), `endif
    .joyana_l1    ( joyana_l1        ), .joyana_l2    ( joyana_l2        ),
    .joyana_l3    ( joyana_l3        ), .joyana_l4    ( joyana_l4        ),
    .joyana_r1    ( joyana_r1        ), .joyana_r2    ( joyana_r2        ),
    .joyana_r3    ( joyana_r3        ), .joyana_r4    ( joyana_r4        ),
    .dial_x       ( dial_x           ), .dial_y       ( dial_y           ),
    // DIP switches
    .status         ( status        ),
    .dipsw          ( dipsw         ),
    .service        ( service       ),
    .tilt           ( tilt          ),
    .dip_pause      ( dip_pause     ),
    .dip_flip       ( dip_flip      ),
    .dip_test       ( dip_test      ),
    .dip_fxlevel    ( dip_fxlevel   ),
    .enable_psg     ( enable_psg    ),
    .enable_fm      ( enable_fm     ),
    // Ports declared in mem.yaml
    {{- range .Ports}}
    .{{.Name}}   ( {{.Name}} ),
    {{- end}}
    // Memory interface - SDRAM
    {{- range .SDRAM.Banks}}
    {{- range .Buses}}{{if not .Addr}}
    .{{.Name}}_addr ( {{.Name}}_addr ),{{end}}{{ if not .Cs}}
    .{{.Name}}_cs   ( {{.Name}}_cs   ),{{end}}
    .{{.Name}}_ok   ( {{.Name}}_ok   ),
    .{{.Name}}_data ( {{.Name}}_data ),
    {{- if .Rw }}
    .{{.Name}}_we   ( {{.Name}}_we   ),
    {{if not .Dsn}}.{{.Name}}_dsn  ( {{.Name}}_dsn  ),{{end}}
    {{if not .Din}}.{{.Name}}_din  ( {{.Name}}_din  ),{{end}}
    {{- end}}
    {{end}}
    {{- end}}
    // Memory interface - BRAM
{{ range $cnt, $bus:=.BRAM -}}
    {{if not .Addr}}.{{.Name}}_addr ( {{.Name}}_addr ),{{end}}{{ if .Rw }}
    {{if not .Din}}.{{.Name}}_din  ( {{.Name}}_din  ),{{end}}{{end}}{{ if .Dual_port.Name }}
    {{ if not .Dual_port.We }}.{{.Dual_port.Name}}_we ( {{.Dual_port.Name}}_we ),  // Dual port for {{.Dual_port.Name}}{{end}}
    {{ else }}{{ if not $bus.ROM.Offset }}{{end}}
    {{- end}}
{{- end}}
    // PROM writting
    .ioctl_addr   ( pass_io ? ioctl_addr       : ioctl_addr_noheader  ),
    .prog_addr    ( pass_io ? ioctl_addr[21:0] : raw_addr      ),
    .prog_data    ( pass_io ? ioctl_dout       : raw_data[7:0] ),
    .prog_we      ( pass_io ? ioctl_wr         : prog_we       ),
    .prog_ba      ( prog_ba        ), // prog_ba supplied in case it helps re-mapping addresses
    .prom_we      ( prom_we        ),
    {{- with .Download.Pre_addr }}
    // SDRAM address mapper during downloading
    .pre_addr     ( pre_addr       ),
    {{- end }}
    {{- with .Download.Post_addr }}
    // SDRAM address mapper during downloading
    .post_addr    ( post_addr      ),
    {{- end }}
    {{- with .Download.Post_data }}
    .post_data    ( post_data      ),
    {{- end }}
`ifdef JTFRAME_HEADER
    .header       ( header         ),
`endif
`ifdef JTFRAME_IOCTL_RD
    .ioctl_din    ( {{.Ioctl.DinName}}      ),
    .ioctl_dout   ( ioctl_dout     ),
    .ioctl_wr     ( ioctl_wr       ), `endif
    .ioctl_ram    ( ioctl_ram      ),
    .ioctl_cart   ( ioctl_cart     ),
    // Debug
    .debug_bus    ( debug_bus      ),
    .debug_view   ( debug_view     ),
`ifdef JTFRAME_STATUS
    .st_addr      ( st_addr        ),
    .st_dout      ( st_dout        ),
`endif
`ifdef JTFRAME_LF_BUFFER
    .game_vrender( game_vrender  ),
    .game_hdump  ( game_hdump    ),
    .ln_addr     ( ln_addr       ),
    .ln_data     ( ln_data       ),
    .ln_done     ( ln_done       ),
    .ln_hs       ( ln_hs         ),
    .ln_pxl      ( ln_pxl        ),
    .ln_v        ( ln_v          ),
    .ln_we       ( ln_we         ),
`endif
    .gfx_en      ( gfx_en        )
);
/* verilator tracing_off */
assign dwnld_busy = ioctl_rom | prom_we; // prom_we is really just for sims
assign dwnld_addr = {{if .Download.Pre_addr }}pre_addr{{else}}ioctl_addr{{end}};
assign prog_addr = {{if .Download.Post_addr }}post_addr{{else}}raw_addr{{end}};
assign prog_data = {{if .Download.Post_data }}{2{post_data}}{{else}}raw_data{{end}};
assign gfx8_en   = {{ .Gfx8 }}
assign gfx16_en  = {{ .Gfx16 }}
assign ioctl_dwn = ioctl_rom | ioctl_cart;
`ifdef VERILATOR_KEEP_SDRAM /* verilator tracing_on */ `else /* verilator tracing_off */ `endif
jtframe_dwnld #(
`ifdef JTFRAME_HEADER
    .HEADER    ( `JTFRAME_HEADER   ),
`endif{{ if .Balut }}
    .BALUT      ( {{.Balut}}    ),  // Using offsets in header for
    .LUTSH      ( {{.Lutsh}}    ),  // bank assignment
{{else}}
`ifdef JTFRAME_BA1_START
    .BA1_START ( BA1_START ),
`endif
`ifdef JTFRAME_BA2_START
    .BA2_START ( BA2_START ),
`endif
`ifdef JTFRAME_BA3_START
    .BA3_START ( BA3_START ),
`endif{{end}}
`ifdef JTFRAME_PROM_START
    .PROM_START( PROM_START ),
`endif
    .SWAB      ( {{if .Download.Noswab }}0{{else}}1{{end}}),
    .GFX8B0    ( {{ .Gfx8b0 }}),
    .GFX16B0   ( {{ .Gfx16b0 }})
) u_dwnld(
    .clk          ( clk            ),
    .ioctl_rom    ( ioctl_dwn      ),
    .ioctl_addr   ( dwnld_addr     ),
    .ioctl_dout   ( ioctl_dout     ),
    .ioctl_wr     ( ioctl_wr       ),
    .gfx8_en      ( gfx8_en        ),
    .gfx16_en     ( gfx16_en       ),
    .prog_addr    ( raw_addr       ),
    .prog_data    ( raw_data       ),
    .prog_mask    ( prog_mask      ), // active low
    .prog_we      ( prog_we        ),
    .prog_rd      ( prog_rd        ),
    .prog_ba      ( prog_ba        ),
    .prom_we      ( prom_we        ),
    .header       ( header         ),
    .sdram_ack    ( prog_ack       )
);

jtframe_headerbyte #(.AW(6)) u_pcbid(
    .clk          ( clk            ),
    .header       ( header         ),
    .ioctl_addr   ( ioctl_addr[5:0]),
    .ioctl_dout   ( ioctl_dout     ),
    .ioctl_wr     ( ioctl_wr       ),
    .dout         ( pcb_id         )
);
`ifdef VERILATOR_KEEP_SDRAM /* verilator tracing_on */ `else /* verilator tracing_off */ `endif
{{ $assign_holdrst := true }}
{{ range $bank, $each:=.SDRAM.Banks }}
{{- if gt (len .Buses) 0 }}
jtframe_{{.MemType}}_{{len .Buses}}slot{{with lt 1 (len .Buses)}}s{{end}} #(
{{- $first := true}}
{{- range $index, $each:=.Buses}}
    {{- if $first}}{{$first = false}}{{else}}, {{end}}
    // {{.Name}}
    {{- if .Rw }}{{ with .Dont_erase }}
    .SLOT{{$index}}_ERASE(0),{{end}}
    {{- else}}{{- with .Offset }}
    .SLOT{{$index}}_OFFSET({{.}}[21:0]),{{end}}{{end}}
    {{- with .Cache_size }}
    .CACHE{{$index}}_SIZE({{.}}),{{end}}
    .SLOT{{$index}}_AW({{ slot_addr_width . }}),
    .SLOT{{$index}}_DW({{ printf "%2d" .Data_width}})
{{- end}}
`ifdef JTFRAME_BA{{$bank}}_LEN
{{- range $index, $each:=.Buses}}
{{- if not .Rw}}
    ,.SLOT{{$index}}_DOUBLE(1){{ end }}
{{- end}}
`endif
{{- $is_rom := eq .MemType "rom" }}
) u_bank{{$bank}}(
{{- $holdrst_placed := false }}
    .rst         ( rst        ),
    .clk         ( clk        ),
    {{ range $index2, $each:=.Buses }}{{if .Addr}}
    .slot{{$index2}}_addr  ( {{.Addr}} ),{{else}}
    {{- if eq .Data_width 32 }}
    .slot{{$index2}}_addr  ( { {{.Name}}_addr, 1'b0 } ),
    {{- else }}
    .slot{{$index2}}_addr  ( {{.Name}}_addr  ),
    {{- end }}{{end}}
    {{- if .Rw }}{{ if not $holdrst_placed }}
    .hold_rst    ( {{if not .Dont_erase}} hold_rst
        {{- $holdrst_placed = true  }}
        {{- $assign_holdrst = false }} {{end}} ),{{end}}
    .slot{{$index2}}_wen   ( {{.Name}}_we    ),
    .slot{{$index2}}_din   ( {{if .Din}}{{.Din}}{{else}}{{.Name}}_din{{end}}   ),
    .slot{{$index2}}_wrmask( {{if .Dsn}}{{.Dsn}}{{else}}{{.Name}}_dsn{{end}}   ),
    .slot{{$index2}}_offset( {{if .Offset }}{{.Offset}}[21:0]{{else}}22'd0{{end}} ),
    {{- else }}
    {{- if not $is_rom }}
    .slot{{$index2}}_clr   ( 1'b0       ), // only 1'b0 supported in mem.yaml
    {{- end }}{{- end}}
    .slot{{$index2}}_dout  ( {{.Name}}_data  ),
    .slot{{$index2}}_cs    ( {{ if .Cs }}{{.Cs}}{{else}}{{.Name}}_cs{{end}}    ),
    .slot{{$index2}}_ok    ( {{.Name}}_ok    ),
    {{end}}
    // SDRAM controller interface
    .sdram_ack   ( ba_ack[{{$bank}}]  ),
    .sdram_rd    ( ba_rd[{{$bank}}]   ),
    .sdram_addr  ( ba{{$bank}}_addr   ),
{{- if not $is_rom }}
    .sdram_wr    ( ba_wr[{{$bank}}]   ),
    .sdram_wrmask( ba{{$bank}}_dsn    ),
    .data_write  ( ba{{$bank}}_din    ),{{end}}
    .data_dst    ( ba_dst[{{$bank}}]  ),
    .data_rdy    ( ba_rdy[{{$bank}}]  ),
    .data_read   ( data_read  )
);
{{- if $is_rom }}
assign ba_wr[{{$bank}}] = 0;
assign ba{{$bank}}_din  = 0;
assign ba{{$bank}}_dsn  = 3;
{{- end}}{{- end }}{{end}}
{{ if $assign_holdrst }}assign hold_rst=0;{{end}}
{{ range $index, $each:=.Unused }}
{{- with . -}}
assign ba{{$index}}_addr = 0;
assign ba_rd[{{$index}}] = 0;
assign ba_wr[{{$index}}] = 0;
assign ba{{$index}}_dsn  = 3;
assign ba{{$index}}_din  = 0;
{{ end -}}
{{ end -}}

`ifdef JTFRAME_PROM_START
localparam JTFRAME_PROM_START=`JTFRAME_PROM_START;
`endif
{{ range $cnt, $bus:=.BRAM -}}
{{- if $bus.Prom }}
wire {{addr_range .}} {{$bus.Name}}_pa;
assign {{$bus.Name}}_pa = raw_addr{{addr_range .}}-JTFRAME_PROM_START{{addr_range .}};
jtframe_prom #(
    .DW({{$bus.Data_width}}),
    .AW({{$bus.Addr_width}}){{ if $bus.Sim_file }},
    .SIMFILE("{{$bus.Name}}.bin"){{end}}
) u_prom_{{$bus.Name}}(
    .clk        ( clk           ),
    .cen        ( 1'b1          ),
    .data       ( raw_data{{data_range .}}),
    .rd_addr    ( {{$bus.Addr}} ),
    .wr_addr    ( {{$bus.Name}}_pa ),
    .we         ( prom_we       ),
    .q          ( {{$bus.Name}}_data )
);
{{- else if $bus.Dual_port.Name }}
// Dual port BRAM for {{$bus.Name}} and {{$bus.Dual_port.Name}}
jtframe_dual_ram{{ if eq $bus.Data_width 16 }}16{{end}} #(
    .AW({{$bus.Addr_width}}{{if eq $bus.Data_width 16}}-1{{end}}){{ if $bus.Sim_file }},
    {{ if eq $bus.Data_width 16 }}.SIMFILE_LO("{{$bus.Name}}_lo.bin"),
    .SIMFILE_HI("{{$bus.Name}}_hi.bin"){{else}}.SIMFILE("{{$bus.Name}}.bin"){{end}}{{end}}
) u_bram_{{$bus.Name}}(
    // Port 0 - {{$bus.Name}}
    .clk0   ( clk ),
    .addr0  ( {{$bus.Addr}} ),{{ if $bus.Rw }}
    .data0  ( {{$bus.Din}}  ),
    .we0    ( {{ if $bus.We }} {{$bus.We}}{{else}}{{$bus.Name}}_we{{end}} ), {{ else }}
    .data0  ( {{$bus.Data_width}}'h0 ),
    .we0    ( {{ if eq $bus.Data_width 16 }}2'd0{{else}}1'd0{{end}} ),{{end}}
    .q0     ( {{$bus.Name}}_dout ),
    // Port 1 - {{$bus.Dual_port.Name}}
    .clk1   ( clk ),
    .data1  ( {{if $bus.Dual_port.Din}}{{$bus.Dual_port.Din}}{{else}}{{$bus.Dual_port.Name}}_dout{{end}} ),
    .addr1  ( {{$bus.Dual_port.AddrFull}} ),
    .we1    ( {{if $bus.Dual_port.We}}{{$bus.Dual_port.We}}{{else}}{{$bus.Dual_port.Name}}_we{{end}}  ),
    .q1     ( {{if $bus.Dual_port.Dout}}{{$bus.Dual_port.Dout}}{{else}}{{$bus.Name}}2{{$bus.Dual_port.Name}}_data{{end}} )
);{{else}}{{if $bus.ROM.Offset }}
/* verilator tracing_off */

jtframe_bram_rom #(
    .AW({{$bus.Addr_width}}{{if is_nbits $bus 16 }}-1{{end}}),.DW({{$bus.Data_width}}),
    .OFFSET({{$bus.ROM.Offset}}),{{ if eq $bus.Data_width 16 }}
    .SIMFILE_LO("{{$bus.Name}}_lo.bin"),
    .SIMFILE_HI("{{$bus.Name}}_hi.bin"){{else}}.SIMFILE("{{$bus.Name}}.bin"){{end}}
) u_brom_{{$bus.Name}}(
    .clk    ( clk       ),
    // Read port
    .addr   ( {{if $bus.Addr}}{{$bus.Addr}}{{else}}{{$bus.Name}}_addr{{end}} ),
    .data   ( {{ data_name $bus }} ),
    // Write port
    .prog_addr( {prog_ba,prog_addr} ),
    .prog_mask( prog_mask ),
    .prog_data( prog_data[7:0] ),
    .prog_we  ( prog_we   )
);
/* verilator tracing_off */

{{else}}
// BRAM for {{$bus.Name}}
jtframe_ram{{ if eq $bus.Data_width 16 }}16{{end}} #(
    .AW({{ sub $bus.Addr_width (div $bus.Data_width 16)}}){{ if ne $bus.Data_width 16}},
    .DW({{$bus.Data_width}}){{end}}{{- if $bus.Sim_file }},
    {{ if eq $bus.Data_width 16 }}.SIMFILE_LO("{{$bus.Name}}_lo.bin"),
    .SIMFILE_HI("{{$bus.Name}}_hi.bin"){{else}}.SIMFILE("{{$bus.Name}}.bin"){{end}}{{end}}
) u_bram_{{$bus.Name}}(
    .clk    ( clk  ),{{ if ne $bus.Data_width 16 }}
    .cen    ( 1'b1 ),{{end}}
    .addr   ( {{$bus.Addr}} ),
    .data   ( {{$bus.Din }} ),
    .we     ( {{$bus.We  }} ),
    .q      ( {{$bus.Name}}_dout )
);{{ end }}
{{ end }}{{end}}

{{- if .Ioctl.Dump }}
`ifndef JTFRAME_SIM_IODUMP /* verilator tracing_off */ `endif
jtframe_ioctl_dump #(
    {{- $first := true}}
    {{- range $k, $v := .Ioctl.Buses }}
    {{- if $first}}{{$first = false}}{{else}},{{end}}
    .DW{{$k}}( {{$v.DW}} ), .AW{{$k}}( {{$v.AW}} ){{end}}
) u_dump (
    .clk       ( clk        ),
    {{- range $k, $v := .Ioctl.Buses }}
    // dump {{$k}}
    .dout{{$k}}        ( {{$v.Dout}} ),
    .addr{{$k}}        ( {{$v.A}} ),
    .addr{{$k}}_mx     ( {{$v.Amx}} ),
    // restore
    .din{{$k}}         ( {{$v.Din}} ),
    .din{{$k}}_mx      ( {{with $v.Name}}{{.}}_dimx{{end}} ),
    .we{{$k}}          ( {{if eq $v.DW 8 }}{ 1'b0,{{ $v.We }} }{{else}}{{$v.We}}{{end}}),
    .we{{$k}}_mx       ( {{with $v.Name}}{{.}}_wemx{{end}} ),
    {{end }}
    .ioctl_addr ( ioctl_addr[23:0] ),
    .ioctl_ram  ( ioctl_ram ),
    .ioctl_aux  ( ioctl_aux ),
    .ioctl_wr   ( ioctl_wr  ),
`ifdef JTFRAME_IOCTL_RD
    .ioctl_din  ( ioctl_din ),
`else
    .ioctl_din  (           ),
`endif
    .ioctl_dout ( ioctl_dout)
);
{{ end }}

{{ if .Clocks }}
// Clock enable generation
{{- range $k, $v := .Clocks }} {{- range $cnt, $val := $v}}
// {{ .Comment }} Hz from {{ .ClkName }}
`ifdef VERILATOR_KEEP_CEN /* verilator tracing_on */ `else /* verilator tracing_off */ `endif
jtframe_gated_cen #(.W({{.W}}),.NUM({{.Mul}}),.DEN({{.Div}}),.MFREQ({{.KHz}})) u_cen{{$cnt}}_{{.ClkName}}(
    .rst    ( rst          ),
    .clk    ( {{.ClkName}} ),
    .busy   ( {{.Busy}}    ),
    .cen    ( { {{ .OutStr }} } ),
    .fave   (              ),
    .fworst (              )
); /* verilator tracing_off */
{{ end }}{{ end }}{{ end }}
{{ template "game_audio.v" .Audio }}
endmodule
